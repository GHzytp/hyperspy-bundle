variables:
  ENV_NAME: test_env
  MPLBACKEND: agg
  TEST_DEPS: pytest pytest-mpl
  PYTHON_VERSION: '3.7'

trigger:
  tags:
    include:
    # build on any tag
    - '*'
  branches:
    include:
    # build on all branches
    - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: hyperspy/ci-scripts
      # For more details on service connection endpoint, see
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/library/service-endpoints
      endpoint: hyperspy # Azure DevOps service connection

strategy:
  matrix:
    Linux:
      vmImage: 'ubuntu-latest'
      INSTALL_DIR: $(Agent.HomeDirectory)/hyperspy-bundle
      INSTALLER_EXTENSION: 'sh'
    MacOS:
      vmImage: 'macOS-latest'
      INSTALL_DIR: /Users/runner/hyperspy-bundle
      INSTALLER_EXTENSION: 'pkg'
    Windows:
      vmImage: 'windows-latest'
      INSTALL_DIR: $(Agent.HomeDirectory)\hyperspy-bundle
      INSTALLER_EXTENSION: 'exe'

pool:
  vmImage: '$(vmImage)'

steps:
- template: azure_pipelines/clone_ci-scripts_repo.yml@templates
- template: azure_pipelines/activate_conda.yml@templates
- template: azure_pipelines/setup_anaconda_packages.yml@templates

- bash: |
    source activate $ENV_NAME
    pip install https://github.com/conda/constructor/archive/master.zip --no-deps
  displayName: Setup Anaconda packages 2

- bash: |
    source activate $ENV_NAME
    constructor -v conda_distribution
  displayName: Build distribution

- bash: |
    shasum -a 256 HyperSpy-*.$INSTALLER_EXTENSION
  displayName: sha256sum
  condition: in(variables['Agent.OS'], 'Linux', 'Darwin')

- publish: $(Build.SourcesDirectory)
  # File to upload defined in the .artifactignore file
  artifact: HyperSpy-bundle-$(Agent.Name)
  displayName: Publish artifact

#################
#     Linux     #
#################

- bash: |
    bash HyperSpy-bundle*.sh -b -p $INSTALL_DIR
  displayName: Install new distribution (Linux)
  condition: eq(variables['Agent.OS'], 'Linux')

#################
#     MacOS     #
#################

- bash: |
    # Print installer information
    echo "installer -dominfo"
    installer -dominfo -pkg HyperSpy-*.pkg -verbose
    echo "installer -volinfo"
    installer -volinfo -pkg HyperSpy-*.pkg -verbose
    # Run the installer
    echo "Running installer"
    installer -pkg HyperSpy-*.pkg -target CurrentUserHomeDirectory
    echo "~:"
    ls ~
    echo "$INSTALL_DIR:"
    ls $INSTALL_DIR
  displayName: Install new distribution (MacOS)
  condition: eq(variables['Agent.OS'], 'Darwin')

# On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
# We need to take ownership if we want to update conda or install packages globally
- bash: sudo chown -R $USER $INSTALL_DIR
  displayName: Take ownership of conda installation (MacOs)
  condition: eq(variables['Agent.OS'], 'Darwin')

#################
#    Windows    #
#################

- powershell: |
    Get-FileHash HyperSpy-*.exe
  displayName: sha256sum (Win)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- powershell: |
    Write-Host "INSTALL_DIR: $Env:INSTALL_DIR"
    # For info, how azure pipelines install miniconda
    # See https://github.com/microsoft/azure-pipelines-image-generation/blob/master/images/win/scripts/Installers/Install-Miniconda.ps1
    $fname = Get-ChildItem HyperSpy*.exe
    Write-Host "Installer name: $fname"
    Start-Process -Wait -FilePath $fname -ArgumentList "/S /AddToPath=0 /RegisterPython=0 /NoScripts=1 /D=$Env:INSTALL_DIR"
    ls $Env:INSTALL_DIR
  displayName: Install new distribution (Win)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    call %INSTALL_DIR%\Scripts\activate.bat
    conda info
  displayName: Install test dependencies (Win)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    call %INSTALL_DIR%\Scripts\activate.bat
    conda install -y %TEST_DEPS%
  displayName: Install test dependencies2 (Win)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    call %INSTALL_DIR%\Scripts\activate.bat
    pytest --pyargs hyperspy
    pytest --pyargs pyxem
    pytest --pyargs atomap
  displayName: Test new distribution (Win)
  condition: eq(variables['Agent.OS'], 'Windows_NT')

#################
# Linux & MacOS #
#################

- bash: |
    source activate $(INSTALL_DIR)
    conda install -y $TEST_DEPS -c conda-forge
  displayName: Install test dependencies
  condition: in(variables['Agent.OS'], 'Linux', 'Darwin')

- bash: |
    source activate $(INSTALL_DIR)
    conda info
  displayName: Conda info new install
  condition: in(variables['Agent.OS'], 'Linux', 'Darwin')

- bash: |
    source activate $(INSTALL_DIR)
    pytest --pyargs hyperspy
    pytest --pyargs pyxem
    pytest --pyargs atomap
  displayName: Test new distribution
  condition: in(variables['Agent.OS'], 'Linux', 'Darwin')

#################
# All Platforms #
#################

- task: GithubRelease@0
  displayName: 'Update GitHub Release on tag only'
  # Release only on tag (branch name start with 'refs/tags/')
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  inputs:
    gitHubConnection: github_release_token_ericpre_azure
    action: edit # Release should already have been created
    tag: $(Build.SourceBranchName)
    repositoryName: ericpre/hyperspy-bundle
    assets: $(Build.SourcesDirectory)/*.$(INSTALLER_EXTENSION)
    assetUploadMode: replace
